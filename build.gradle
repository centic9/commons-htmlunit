buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.thetaphi:forbiddenapis:3.9'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    // https://github.com/researchgate/gradle-release
    id 'net.researchgate.release' version '3.0.2'
    id 'io.codearte.nexus-staging' version '0.30.0'
}

apply plugin: 'de.thetaphi.forbiddenapis'
apply plugin: 'jacoco'
apply plugin: 'signing'

java {
  toolchain {
	  sourceCompatibility = JavaVersion.VERSION_17
  }
}
group = 'org.dstadler'
base {
    archivesName = 'commons-htmlunit'
}

repositories {
    mavenCentral()
}

forbiddenApis {
    suppressAnnotations = ['org.dstadler.commons.util.SuppressForbidden']
    bundledSignatures = [ 'jdk-reflection', 'commons-io-unsafe-2.18.0', 'jdk-internal' ]
}
forbiddenApisMain {
    // 'jdk-unsafe', 'jdk-system-out'
    bundledSignatures += [ 'jdk-deprecated', 'jdk-internal', 'jdk-non-portable' ]
}

dependencies {
    api 'org.htmlunit:htmlunit:4.13.0'
    implementation 'com.google.guava:guava:33.4.8-jre'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.4'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.13.4'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.4'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.13.4'

    testImplementation 'org.dstadler:commons-test:1.0.0.22'
    testImplementation 'org.dstadler:commons-dost:1.4.3'
}

wrapper {
    gradleVersion = '8.14.2'
}

test {
    systemProperties = System.properties as Map<String, ?>

    // enable to show standard out and standard error of the test JVM(s) on the console
    // testLogging.showStandardStreams = true

    // http://forums.gradle.org/gradle/topics/jacoco_related_failure_in_multiproject_build
    systemProperties['user.dir'] = workingDir

    // avoid failures because Gradle provides it's own version of JNA in the system properties
    systemProperties['jna.boot.library.path'] = null
    useJUnitPlatform()
}

jacoco {
    toolVersion = '0.8.13'
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

tasks.register('sourcesJar', Jar) {
	archiveClassifier = 'sources'
	from sourceSets.main.allJava
}

tasks.register('javadocJar', Jar) {
	archiveClassifier = 'javadoc'
	from javadoc
}

java {
    withJavadocJar()
    withSourcesJar()
}

release {
    git {
        requireBranch.set('master')
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java

            pom {
                name = 'Common HtmlUnit Helpers'
                description = 'Common HtmlUnit utility methods that I find useful in various projects.'
                url = 'https://github.com/centic9/commons-htmlunit'
                licenses {
                    license {
                        name = 'BSD 2-Clause "Simplified" License'
                        url = 'https://github.com/centic9/commons-htmlunit/blob/master/LICENSE.md'
                    }
                }
                developers {
                    developer {
                        id = 'centic9'
                        name = 'Dominik Stadler'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:centic9/commons-htmlunit'
                    developerConnection = 'scm:git@github.com:centic9/commons-htmlunit'
                    url = 'https://github.com/centic9/commons-htmlunit'
                }
            }
        }
    }
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            //url = layout.buildDirectory.dir('repo')
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials(PasswordCredentials)
            //snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/')
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

afterReleaseBuild.dependsOn publish
